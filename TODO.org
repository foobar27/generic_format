* Various Ideas
** Documentation
- rewrite the introduction of the README file
- write a paragraph: why not use boost::spirit/karma?
- general overview (list the various aspects of the library)
- how to wrap own types
** Philosophical Questions
- or return value, or pass reference, to fill result?
  - or even reduce the data with some function?
** Features
- repeated fields,
  - deref operator
    - verify reference has been defined before in the format
  - how to "nest" references (e.g. nested structs, all have references)
    - make a variadic kind of generator, which is given as a template argument?
  - disable copy ctor for state
  - also allow reference+constant arithmetic
  - generic ast traversal (via ::children)
    - to compute size
    - to compute placeholder_map
  - move more into base class of ast?
    - e.g. native_type
  - try out with map<int, map<int, int>>
  - we need another argument for read/write methods, a state object
    - the struct can be accessed by placeholders
  - even when number of repetitions depends on several fields (e.g. width*height)
    #+BEGIN_SRC cpp
    auto width = reference(std::placeholder::_1, uint32_le);
    auto height = reference(std::placeholder::_2, uint32_le_t);
    auto data = repeated(width*height, int8_le);
    Image_format = GENERIC_FORMAT_ADAPT_STRUCT(Image, width, height, data);
    #+END_SRC
  - remove coupling to vector, use visitors instead?
  - test for overflows!
  - who takes care of the allocation of 'data'?
  - or when the data is simply serialized into a vector
  - check that placeholder are well-formed (unique, and references only to previously defined values)
  - port strings to this infrastructure
  - also allow std::placeholders
  - replace the state by varargs (even only the arguments which are actually referenced!)
- simplify the declarations of the ast nodes (to facilitate the user to declare their own)
- can we somehow wrap private fields?
- allow serialization to asio buffers
- strings: provide alternatives: fixed-length, zero-terminated, length-data-format, ...
- more meaningful error messages
- floating point primitives
- enums
- iterator-like interface
- array-like interface for fixed-length types
- sequences: be variadic
- refine syntax for struct-wrapping
- mapping from one type to the other without intermediate data structure
- support nested structs
- keep state, e.g. checksums
- verify header fields, e.g. via integral_constant
- have a look at the [[https://github.com/ztellman/gloss/wiki/Introduction][gloss]] features
- Seriously support endianness. Currently we support it in the naming
  scheme, but then again =uint8_le= and =uint8_be= will certainly be the same.
- what contract do we need for async i/o?
- Allow the format to be saved in a file. This could integrate a flag which
  byte-order has been used, such that files created on a machine are
  automatically created in the native endian format, but files copied from
  another machine can still be loaded.
- Versioning of formats?
- Automatically fill-in serialized types based on the types of the fields,
  if not provided. This is a dangerous feature, and I would only implement it if
  the formats are stored in the header of each file.
- lookup-indices to seek to position
- json de/serialization
- merge of two files
** Code Cleanup
- use integral_constant for type checks, and false_type and true_type
- separate interface and implementation (e.g. helper.hpp)
- search for '...' and check if it can be simplified
- refactor placeholders.hpp
- think about strategy of what belongs into 'impl' namespaces
- somehow reuse the same code (via visitor pattern?) for
  - write
  - read
  - seek
  - size
  - ...
- change template argument name convention (no more all-caps)
- more "concepts" and "archetypes"
  - e.g. you can't add a reference and something else (except products and sums)
  - flatten references to references? or disallow them?
- completely factor out size computation
- where to put operator<<? Same namespace? Global namespace?
- in DEBUG builds: fail if buffer overrun in unbounded_memory? (e.g. via some assertions, and DEBUG flags?)
- be less sloppy about move ctors in tests (especially assignments)
- default values via initializer lists
- fill in doxygen @author & co
- factor out foreach
- remove type-specific operator() from =raw_reader= and =raw_writer=
- =adapt_struct= -> =struct_format=
- use 'explicit' where appropriate
- named members
- use more initializer syntax
- clean up benchmark (especially timing part)
- use more type inference
- remove std::tuple dependency
- use =size_t= when appropriate
- clean up the build system. For example I don't like that we force C++11
  upon other people, even on those who are using C++14. Also check if
  installation of the header files works correctly, and other projects can use
  it correcly via =find_package=.
- factor out foreach to iterate over all the fields
- add doxygen and a proper documentation
** Missing Documentation
- contract for =raw_reader= and =raw_writer=
** Optimizations
- verify how gcc and clang compile the code
- perhaps play with inlining
- maybe don't use references for primitive types
- optimization: =adapted_struct=: if no padding and pod, copy memory
