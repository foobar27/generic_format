* Roadmap
** Work out mapping concept
- [-] introduce lenses (do they make sense in a non-implicit context?
  - [X] rename existing references to variables
  - [ ] transform before serialization / after deserialization
  - [ ] special kind of lenses:
    - [ ] member pointers
    - [ ] getter/setter
- [-] introduce mapped sequences
  - [ ] slim down current mapping interface
    - [ ] e.g. what would ElementWriter mean?
  - [ ] test case for generic_list
  - [X] introduce ast node
  - [X] adjust << operator
  - [X] take care of native format
  - [ ] reuse =mapped_sequence= for =sequence= (by using a std::tuple-mapping)
  - [ ] test case: Image << Packet (bounded sequence of two bounded sequences)
  - [ ] constraints on sequence elements: is_unmapped_sequence or is_format
  - [ ] reuse reference type for tuple_get and other mappings
  - [ ] implement default mappings (?)
    - [ ] via type selection (tuple, vector, ...)
  - [ ] warn about not-explicitely mapped items in mapped_sequences?
- [ ] simplify =adapted_struct=
  - [ ] special kind of lenses: member pointers
  - [ ] use mapped sequences
  - [ ] remove ast::adapted_struct (only leave the DSL)
  - [ ] try out nested references
- [ ] implement mappings for basic data structures
  - [ ] vectors
    - [ ] implement
    - [ ] remove =vector_mapping=
    - [ ] test
  - [ ] maps
  - [ ] sets
- [ ] port strings to =repeated= infrastructure
- [ ] example implementation: lookup tables
** Code Cleanup
- reuse generic_list for children_list
- take care of =using= in namespace blocks
  - see http://stackoverflow.com/questions/6175705/scope-of-using-declaration-within-a-namespace
- clean up directory structure of tests directory
- use 'explicit' where appropriate
- clean up benchmark (especially timing part)
- use more type inference
- clean up the build system. For example I don't like that we force C++11
  upon other people, even on those who are using C++14. Also check if
  installation of the header files works correctly, and other projects can use
  it correcly via =find_package=.
- use more initializer syntax
- more documentation
  - rewrite the introduction of the README file
  - write a paragraph: why not use boost::spirit/karma?
  - enhance doxygen
  - higher-level documentation
    - various internal APIs
  - how to
    - wrap own types
  - fill in doxygen @author & co
  - contract for =raw_reader= and =raw_writer=
** Scopes for placeholders
- [ ] scopes for placeholders. Within a scope:
  - all nested placeholders will be translated to a unique placeholder
  - within a scope
  - but how can we leak a placeholder, e.g. the 'data_ref', to write visitors
** Named Fields for JSON de/serialization
** Optimization ideas
- [ ] replace the state by varargs (maybe even only the arguments which are actually referenced!)
- [ ] verify how gcc and clang compile the code
- [ ] perhaps play with =inline=
- [ ] maybe don't use references for primitive types
- [ ] =adapted_struct=: if no padding nad pod, copy memory (we need to trust the user that the order is correct)
* Various Ideas
** Philosophical Questions
- or return value, or pass reference, to fill result?
  - or even reduce the data with some function?
- decouple syntax and semantics
  - create new namespace for semantics
  - =adapted_struct= belongs into that namespace, and should reuse ast::sequence
  - composability?
    - e.g. nested structs
    - e.g. vector-in-struct (like lookup-table)
  - repeated fields
    - 
- API questions
  - internal
    - reduce explosion of combinations between the APIs?
  - external
    - how to separate syntax (format specification) and semantics
      (data-structure which represent the data)
      - this smells like a monad?
** Features
- priorities
  - scopes for placeholders. Within a scope:
    - all nested placeholders will be translated to a unique placeholder
    - within a scope
    - but how can we leak a placeholder, e.g. the 'data_ref', to write visitors
- repeated fields
  - monads?
- allow serialization to asio buffers
- repeated fields,
  - deref operator
    - verify reference has been defined before in the format
  - how to "nest" references (e.g. nested structs, all have references)
    - make a variadic kind of generator, which is given as a template argument?
  - disable copy ctor for state
  - also allow reference+constant arithmetic
  - try out with map<int, map<int, int>>
  - we need another argument for read/write methods, a state object
    - the struct can be accessed by placeholders
  - test for overflows!
  - who takes care of the allocation of 'data'?
  - or when the data is simply serialized into a vector
- can we somehow wrap private fields?
- strings: provide alternatives: fixed-length, zero-terminated, length-data-format, ...
- more meaningful error messages
- floating point primitives
- enums
- iterator-like interface
- array-like interface for fixed-length types
- mapping from one type to the other without intermediate data structure
- keep state, e.g. checksums
- verify header fields, e.g. via integral_constant
- have a look at the [[https://github.com/ztellman/gloss/wiki/Introduction][gloss]] features
- Seriously support endianness. Currently we support it in the naming
  scheme, but then again =uint8_le= and =uint8_be= will certainly be the same.
- Allow the format to be saved in a file. This could integrate a flag which
  byte-order has been used, such that files created on a machine are
  automatically created in the native endian format, but files copied from
  another machine can still be loaded.
- Versioning of formats?
- Automatically fill-in serialized types based on the types of the fields,
  if not provided. This is a dangerous feature, and I would only implement it if
  the formats are stored in the header of each file.
- lookup-indices to seek to position
- json de/serialization
- merge of two files
** Arduino Support
- [ ] remove exceptions
- [ ] bit-boundaries instead of byte-boundaries
  - [ ] adjust size_container
** Code Cleanup
- extract custom map type (indexed by a Predicate)
- use =std::forward<>...= in reader/writer???
- separate interface and implementation (e.g. helper.hpp)
- search for '...' and check if it can be simplified
- somehow reuse the same code (via visitor pattern?) for
  - write
  - read
  - seek
  - size
  - ...
- move more into base class of ast?
  - e.g. native_type
- generic ast traversal (via ::children)
  - to compute size
  - to compute placeholder_map
- completely factor out size computation
- where to put operator<<? Same namespace? Global namespace?
- in DEBUG builds: fail if buffer overrun in unbounded_memory? (e.g. via some assertions, and DEBUG flags?)
- be less sloppy about move ctors in tests (especially assignments)
- provide default values via initializer lists
- factor out foreach
- remove type-specific operator() from =raw_reader= and =raw_writer=
- =adapt_struct= -> =struct_format=
- named members
